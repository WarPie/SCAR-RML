{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=]
 Copyright (c) 2013, Jarl Holta (slacky).
 Contains parts taken from MSSL (By Janilabo).
 All rights reserved. Copying must include this header.
[=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

(* Colors as seen in the uptext *)
var
  RS_MainFont, RS_NPCFont, RS_OptionFont, RS_SmallFont:Integer; 
  RS_SmallFont2, RS_StatFont, RS_UpFont: Integer; 

  RS_MainFontXT, RS_NPCFontXT, RS_OptionFontXT, RS_SmallFontXT: TChars; 
  RS_SmallFont2XT, RS_StatFontXT, RS_UpFontXT: TChars; 
  RS_UpFont2: TCharsN;
     
var
  __bmpChooseOption: TSCARBitmap;

  
(*   
  Load all the needed fonts in to memory                
*)
procedure RS_LoadOCR;
begin
  RS_MainFont   := LoadChars2(FontDir + 'MainFont\');
  RS_NPCFont    := LoadChars2(FontDir + 'NPCFont\');
  RS_OptionFont := LoadChars2(FontDir + 'OptionFont\');
  RS_SmallFont  := LoadChars2(FontDir + 'SmallFont\');
  RS_SmallFont2 := LoadChars2(FontDir + 'SmallFont2\');
  RS_StatFont   := LoadChars2(FontDir + 'StatFont\');
  RS_UpFont     := LoadChars2(FontDir + 'UpFont\');  
  
  RS_MainFontXT   := XT_LoadFont(FontDir + 'MainFont\');
  RS_NPCFontXT    := XT_LoadFont(FontDir + 'NPCFont\');
  RS_OptionFontXT := XT_LoadFont(FontDir + 'OptionFont\');
  RS_SmallFontXT  := XT_LoadFont(FontDir + 'SmallFont\');
  RS_SmallFont2XT := XT_LoadFont(FontDir + 'SmallFont2\');
  RS_StatFontXT   := XT_LoadFont(FontDir + 'StatFont\');
  RS_UpFontXT     := XT_LoadFont(FontDir + 'UpFont\'); 
  
  RS_UpFont2      := RS_LoadFont(FontDir + 'UpFontShadow\');   
                      
  __bmpChooseOption := TSCARBitmap.Create('deNrjZhBiiA1xx48YRgYg6GtkKaxqkAUHSgH9AwoTAQAdzy6e');
end;
 
 
(*   
  Free all RS-fonts from memory.               
*)
procedure RS_FreeOCR;
begin       
  FreeChars2(RS_MainFont);
  FreeChars2(RS_NPCFont);
  FreeChars2(RS_OptionFont);
  FreeChars2(RS_SmallFont);
  FreeChars2(RS_SmallFont2);
  FreeChars2(RS_StatFont);
  FreeChars2(RS_UpFont);
   
  XT_FreeFont(RS_MainFontXT);
  XT_FreeFont(RS_NPCFontXT);
  XT_FreeFont(RS_OptionFontXT);
  XT_FreeFont(RS_SmallFontXT);
  XT_FreeFont(RS_SmallFont2XT);
  XT_FreeFont(RS_StatFontXT);
  XT_FreeFont(RS_UpFontXT);
  
  RS_FreeFont(RS_UpFont2);
  
  __bmpChooseOption.Free;
end;


(*   
 Simple function to get the uptext (Text in the Left-Top corner in RS) 
*)
function RS_GetTextAtEx(x,y, width: Integer; Font:TCharsN; EndStr:String): String;
var 
  Client: T2DIntArray;
  Height,i: Integer;
  
begin
  Height := Font[32].Height;
  Client := XT_Bmp2Matrix(XT_ClientBMP(x,y,x+width,y+Height), True);
  
  //OCR 
  Result := RS_ReadText(Client, Font, 0,200, EndStr);
  //Strip noise chars from start and end.
  for i:=0 to 1 do
  begin
    Result := TrimEx('.', Result);   
    Result := TrimEx(',', Result);
    Result := TrimEx(':', Result);
    Result := TrimEx('''', Result);
  end;
end;

(*   
 ...
*)
function RS_GetUpText: String;
begin
  Result := RS_GetTextAtEx(7,7,500,RS_UpFont2, 'mo*e opt**ns');
end;


function RS_GetTextAt(x,y,width:Integer; Font:TCharsN): String;
begin
  Result := RS_GetTextAtEx(x,y,width,Font, '');
end;


(*   
 Check if the uptext contains your text..             
*)
function RS_IsUpText(Text: String): Boolean;
begin
  Result := StrContains(Text, RS_GetTextAtEx(7,7,500,RS_UpFont2, text));
end;


(*   
 Check if the uptext contains any of your strings..            
*)
function RS_IsUpTextAny(TextArr: TStrArray): Boolean;
begin
  Result := StrContainsAny(TextArr, RS_GetUpText);
end;


(*   
 Check if the uptext contains all of your strings.. 
*)
function RS_IsUpTextAll(TextArr: TStrArray): Boolean;
begin
  Result := StrContainsAll(TextArr, RS_GetUpText);
end;


(*   
 Check if the uptext contains all of your strings.. 
*)
function RS_IsUpTextEx(TextPtrn: String): Boolean;
begin
  Result := StrMatches(TextPtrn, RS_GetUpText, '*', True) <> '';
end;


////----------------------------------------------------------------------------
////----------------------------------------------------------------------------
////----------------------------------------------------------------------------


(*   
 Returns the latest chat message. 
*)
function RS_GetChatMsgLast: String;
begin
  Result := XT_GetTextAtEx(Box(8,445,497,460), [RS_SmallFontXT], 1,1, [clBlack, clBlue], 1,2,1,'');
end;


(*   
 Returns the chat message. 
*)
function RS_GetChatMsg(RowID:Integer): String;
begin
  if RowID > 7 then begin 
    WriteLn('[WARNING] RowID out of range: ' + IntToStr(RowID) +'.');
    Exit;
  end;
  RowID := RowID * 14;
  Result := XT_GetTextAtEx(Box(8,445-RowID,495,458-RowID), [RS_SmallFontXT], 1, 1, [clBlack, clBlue], 1,10,1,'');
end;


(*   
 Returns the chat message. 
*)
function RS_GetChatMsgEx(RowID:Integer; var User:String): String;
begin
  if RowID > 7 then begin 
    WriteLn('[WARNING] RowID out of range: ' + IntToStr(RowID) +'.');
    Exit;
  end;
  RowID := RowID * 14;
  User := XT_GetTextAtEx(Box(8,445-RowID,150,458-RowID), [RS_SmallFontXT], 1, 1, [clBlack], 1,10,1,'');
  Result := XT_GetTextAtEx(Box(8,445-RowID,495,458-RowID), [RS_SmallFontXT], 1, 1, [clBlue], 1,10,1,'');
end;



////----------------------------------------------------------------------------
////----------------------------------------------------------------------------
////----------------------------------------------------------------------------


(*   
 ...
*)
function RS_FindChooseOptionMenu(var Pos:TPoint): Boolean;
begin
  Result := FindBitmap(pos.x, pos.y, __bmpChooseOption, 0, 0, 764, 502);
  if Result then
  begin
    pos.x := (pos.x - 88);
    pos.y := (pos.y + 2);
  end;
end;


(*   
 ...
*)
function RS_ChooseOptionActive: Boolean;
var x,y:Integer;
begin
  Result := FindBitmap(x, y, __bmpChooseOption, 0, 0, 764, 502);
end;


(*   
 ...
*)
function RS_ChooseOptionArea(var Area: TBox): Boolean;
var
  tp:Tpoint;
  bmp: TSCARBitmap;
begin
  area := Box(0, 0, 0, 0);
  Result := RS_FindChooseOptionMenu(tp);
  if Result then
  begin
    bmp := GetClient.Capture;  
    tp := Point((tp.x - 1), (tp.y + 17));
    Area := TPABounds(XT_FloodFillMatrixEx(XT_Bmp2Matrix(Bmp, True),TP,False));
    ExpandBox(Area, 2);
    area.Y1 := (Area.Y1 - 17);
    FitBoxIn(Area, GetClient.ImageArea);
  end;
end;


(*   
 ...
*)
function RS_ChooseOptionItemArea(var Area: TBox): Boolean;
begin
  Result := RS_ChooseOptionArea(Area);
  if Result then
    area.Y1 := (area.Y1 + 17);
end;


(*   
 Open the "choose option" box.
*)
function RS_OpenChooseOptionEx(Pt:TPoint; StdDev, MaxDev:Integer): Boolean;
var
  maxT,i:Integer;
  Null:TPoint;
begin
  Result := False;
  while not(Result) and (i <= 3) do
  begin  
    MMouseClick(Pt, StdDev, MaxDev, mbRight);
    MaxT := GetTimeRunning + 1000;
    while (GetTimeRunning < MaxT) do
    begin
      if RS_FindChooseOptionMenu(Null) then
      begin
        Result := True;
        Break;
      end;
    end;
    Inc(i);
  end;
end;


(*   
 Open the "choose option" box.
*)
function RS_OpenChooseOption(Pt:TPoint): Boolean;
begin
  Result := RS_OpenChooseOptionEx(Pt, 1, 1);                 
end;


(*   
 Returns every item in the option list!
*)
function RS_GetChooseOptionList: TStrArray;
var
  B:TBox;
  bmp: TSCARBitmap;
  client: TSCARClient;
  W,H: Integer;
  TPA:TPointArray;
  Str:String;
begin
  if RS_ChooseOptionItemArea(B) then 
  begin
    if not(FindColorsEx(TPA, [0, 4674653], B.X1, B.Y1, B.X2, B.Y2)) then 
      Exit; 
    bmp := TSCARBitmap.Create('');        
    W := (B.X2 - B.X1 + 1);
    H := (B.Y2 - B.Y1 + 1);
    bmp.SetSize(W, H); 
    OffsetTPA(TPA, -B.X1, -B.Y1);
    bmp.SetPixels(XT_InvertTPA(TPA), $FFFFFF);
    client := SetClient(TSCARBitmapClient.Create(bmp));   
    Str := XT_GetTextDynAtEx(Box(0,0,W-1,H-1), [RS_OptionFontXT], 1,1, 5,1, 0, False, '');
    SetClient(client).Free;
    Result := Explode(#13#10, Str);   
  end;
end;



(*   
 Select the option by the given Text.
*)
function RS_ChooseOptionEx(Text:String; var ID:Integer; OpenIt:Boolean): Boolean;
var
  B:TBox;
  i,y1,y2,t: Integer;
  Options:TStrArray;   
  pt:TPoint;
begin
  if OpenIt then 
  begin
    GetMousePos(pt.x, pt.y);
    RS_OpenChooseOptionEx(Pt, 1, 1);
  end;
  Result := False;
  if RS_ChooseOptionItemArea(B) then 
  begin
    Options := RS_GetChooseOptionList;  
    for i:=0 to High(Options) do
      if StrContains(Text, Options[i]) then  
      begin 
        y1 := (I*15) + B.y1;
        y2 := y1 + 15;
        MMouseClickEx(Point(((b.x2 + b.x1) div 2), (y2+y1) div 2), 1,1,15,4, mbLeft);  
        Result := True;
        ID := i;
        t := GetTimeRunning + 2000;
        while (GetTimeRunning < T) do
          if Not(RS_ChooseOptionActive) then Break;
        Exit;
      end;
  end;
end;


(*   
 Select the option by the given Text.
*)
function RS_ChooseOption(Text:String): Boolean;
var id:Integer;
begin
  Result := RS_ChooseOptionEx(Text, ID, False);
end;


(*   
 Select the option by the given Text-Array.
*)
function RS_ChooseOptionAnyEx(Text:TStrArray; var ID:Integer; OpenIt:Boolean): Boolean;
var
  B:TBox;
  i,y1,y2,t: Integer;
  Options:TStrArray;   
  pt:TPoint;
begin
  if OpenIt then 
  begin
    GetMousePos(pt.x, pt.y);
    RS_OpenChooseOptionEx(Pt, 1, 1);
  end;
  Result := False;
  if RS_ChooseOptionItemArea(B) then 
  begin
    Options := RS_GetChooseOptionList;  
    for i:=0 to High(Options) do
      if StrContainsAny(Text, Options[i]) then  
      begin 
        y1 := (I*15) + B.y1;
        y2 := y1 + 15;
        MMouseClickEx(Point(((b.x2 + b.x1) div 2), (y2+y1) div 2), 6,2,15,4, mbLeft);  
        Result := True;
        ID := i;
        t := GetTimeRunning + 2000;
        while (GetTimeRunning < T) do
          if Not(RS_ChooseOptionActive) then Break;
        Exit;
      end;
  end;
end;


(*   
 Select the option by the given Text-Array.
*)
function RS_ChooseOptionAny(Text:TStrArray): Boolean;
var id:Integer;
begin
  Result := RS_ChooseOptionAnyEx(Text, ID, False);
end;


(*   
 Select the option by the given id, it will return the text at the option.
*)
function RS_ChooseOptionIDEx(ID:Integer; var Text:String): Boolean;
var
  B:TBox;
  y1,y2: Integer;
  Options:TStrArray;   
begin
  Result := False;
  if RS_ChooseOptionItemArea(B) then 
  begin
    Options := RS_GetChooseOptionList;
    if ID < High(Options) then
    begin 
      y1 := (ID*15) + B.y1;
      y2 := y1 + 15;
      MMouseClickEx(Point(((b.x2 + b.x1) div 2), (y2+y1) div 2), 6,2,15,4, mbLeft); 
      Result := True;
      Text := Options[ID];
      Exit;
    end;
  end;
end;


(*   
 Select option by ID.
*)
function RS_ChooseOptionID(ID:Integer): Boolean;
var Text:String;
begin
  Result := RS_ChooseOptionIDEx(ID, Text);
end;


(*   
 Check if the given text is found in the option menu
*)
function RS_IsChooseOptionText(Text:String): Boolean;
var
  i:Integer;
  B:TBox;   
  Options:TStrArray;
begin
  Result := False;
  if RS_ChooseOptionItemArea(B) then 
  begin
    Options := RS_GetChooseOptionList; 
    for i:=0 to High(Options) do
      if StrContains(Text, Options[i]) then  
      begin
        Result := True;
        Exit; 
      end;
  end; 
end;


(*   
 Select the option by the given id.
*)
function RS_GetChooseOptionText(ID:Integer): String;
var
  B:TBox;
  Options:TStrArray;
begin
  if RS_ChooseOptionItemArea(B) then 
  begin
    Options := RS_GetChooseOptionList;
    if High(Options) <= ID then
      Result := Options[id]; 
  end;                  
end;


(*   
 Close the "choose option" box.
*)
function RS_CloseChooseOption: Boolean;
begin 
  Result := RS_ChooseOption('Cancel');  
end;


////----------------------------------------------------------------------------
////----------------------------------------------------------------------------
////----------------------------------------------------------------------------

(*   
 ...
*)
function RS_ExtractTextBoxes(Area:TBox; Colors:TIntArray; tolerance: Integer): TBoxArray;
var
  W,H,I:Integer;
  TPA: TPointArray;
  TextClusters: T2DPointArray;
  B:TBox;
begin
  if FindColorsTolEx(TPA, Colors, Area.x1, Area.y1, Area.x2, Area.y2, tolerance) then
  begin
    TextClusters := XT_ClusterTPAEx(TPA, 12,1, True);  
    for i:=0 to High(TextClusters) do
    begin
      B := TPABounds(TextClusters[i])
      W := (B.x2-B.x1) + 1;
      H := (B.y2-B.y1) + 1;
      if (W > 6) and (H > 6) then
      begin
        SetLength(Result, Length(Result) + 1);
        Result[High(Result)] := B;
      end;
    end;
  end;
end; 


(*   
 Look for text on the RS mainscreen.
*)
function RS_GetScreenText(Area:TBox; TextColors:TIntArray; ColorTol: Integer): TStrArray;
var
  i:Integer;
  Text:String;
  Boxes:TBoxArray;
begin
  Boxes := RS_ExtractTextBoxes(Area, TextColors, ColorTol);
  if (Length(Boxes) = 0) then Exit;
  
  for i:=0 to High(Boxes) do
  begin
    Text := XT_GetTextAtEx(Boxes[i], [RS_UpFontXT], 1, 1, TextColors, ColorTol, 8, 1,'');
    if Length(Text) <> 0 then
    begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)] := Text;
    end;
  end;
end;


(*   
 Checks if any of the texts found on the mainscreen matches your text.
*)
function RS_IsScreenText(Text:String; Area:TBox; TextColors:TintArray; ColorTol: Integer): Boolean;
var
  i:Integer;
  TSA: TStrArray;
begin
  TSA := RS_GetScreenText(Area, TextColors, ColorTol);
  if (Length(TSA) = 0) then Exit;  
  Result := True;
  for i:=0 to High(TSA) do
    if StrContains(Text, TSA[i]) then Exit;
  Result := False;
end;

(*   
 Checks if any of the texts found on the mainscreen matches any of your texts..
*)
function RS_IsScreenTextAny(Text:TStrArray; Area:TBox; TextColors:TintArray; ColorTol: Integer): Boolean;
var
  i:Integer;
  TSA: TStrArray;
begin
  TSA := RS_GetScreenText(Area, TextColors, ColorTol);
  if (Length(TSA) = 0) then Exit;  
  Result := True;
  for i:=0 to High(TSA) do
    if StrContainsAny(Text, TSA[i]) then Exit; 
  Result := False;
end;


(*   
 Checks if any of the texts found on the mainscreen matches all of your texts..
*)
function RS_IsScreenTextAll(Text:TStrArray; Area:TBox; TextColors:TintArray; ColorTol: Integer): Boolean;
var
  i:Integer;
  TSA: TStrArray;
begin
  TSA := RS_GetScreenText(Area, TextColors, ColorTol);
  if (Length(TSA) = 0) then Exit;
  Result := True;
  for i:=0 to High(TSA) do
    if StrContainsAll(Text, TSA[i]) then Exit;  
  Result := False;
end;