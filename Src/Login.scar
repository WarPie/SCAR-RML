{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=]
 Copyright (c) 2013, Jarl Holta (slacky).
 Contains parts taken from MSSL (By Janilabo).
 All rights reserved. Copying must include this header.
[=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}
type
  RS_TLoginMessage = record 
    CheckBox :TBox; 
    CheckMsg:String; 
  end;  
  
  
var
  RS_LoginMessageArray: Array of RS_TLoginMessage; 
  

const
  LOGIN_CONNECTING       = 10000;
  LOGIN_IS_ONLINE        = 10001;
  LOGIN_CONNETCION_ERROR = 10002;
  LOGIN_INVALID          = 10003; 
  LOGIN_DISABLED         = 10004;
  LOGIN_ENTER_DETAILS    = 10005;
  LOGIN_INCORRECT_LOGINS = 10006; 
  LOGIN_SERVER_UPDATE    = 10007;
  LOGIN_FULL_WORLD       = 10008;
  LOGIN_LOGIN_LIMIT      = 10009;
  LOGIN_TRANSFERRING     = 10010;


function RS_LoginMessage(CheckBox:TBox; CheckMsg:String): RS_TLoginMessage;
begin
  Result.CheckBox := CheckBox;
  Result.CheckMsg:= CheckMsg;
end;


{*
  Converts a (Login_??) constant in to a index, and returns msg. 
*}
function RS_GetLoginMessageData(ID:Integer): RS_TLoginMessage;
begin
   Result := RS_LoginMessageArray[ID-10000]; 
end;


{*
  Loads all the login messages.
*}
procedure RS_LoadLogin;
begin
  SetLength(RS_LoginMessageArray,11); 
  RS_LoginMessageArray := [RS_LoginMessage(Box(307,199,450,235), 'Connecting'),
                           RS_LoginMessage(Box(270,199,450,235), 'Your acc'),
                           RS_LoginMessage(Box(293,199,450,235), 'Error conn'),
                           RS_LoginMessage(Box(261,199,450,235), 'Invalid user'),
                           RS_LoginMessage(Box(98, 214,290,235), 'Your account has'),
                           RS_LoginMessage(Box(250,199,390,235), 'nter your user'),
                           RS_LoginMessage(Box(233,199,390,230), 'Too many'),
                           RS_LoginMessage(Box(284,199,450,230), 'RuneScape has'),
                           RS_LoginMessage(Box(326,199,450,230), 'This world is full'),
                           RS_LoginMessage(Box(313,199,390,230), 'Login limit'),
                           RS_LoginMessage(Box(250,198,512,216), 'ou have only just')]; 
end;


{*
  Frees all the login messages.
*}
procedure RS_FreeLogin;
begin
  SetLength(RS_LoginMessageArray, 0);
end;


(*
 Check if the player is logged in
*) 
function RS_LoggedIn: Boolean;
begin
  Result := CountColorTol(1908322, 405,480,512,500, 35) >= 60;
end;


(*
 Check if the player is logged out
*) 
function RS_LoggedOut: Boolean;
begin
  Result := CountColorTol($0b0b0b, 248,170,516,175, 35) >= 450;
end;

//-----------------------------------------------------------------
(*
 ..
*) 
function RS_AtWelcomeScreen: Boolean;
begin
  Result := IsTextAtEx(304, 19, 'Welcome to RuneScape', 0, RS_NPCFont, False, False, 0, 0, cl_Red) or 
            IsTextAtEx(360, 329, 'CLICK HERE TO PLAY', 0, RS_MainFont, False, False, 0, 0, cl_White);
end;


(*
 ..
*) 
function RS_AtLogin: Boolean;
begin
  Result := IsTextAtEx(308, 239, 'Welcome to RuneScape', 0, RS_MainFont, False, False, 0, 0, cl_Yellow);
end;


(*
 ..
*) 
function RS_AtLoginNewUserPage: Boolean;
begin
  Result := IsTextAtEx(345, 199, 'How to Play', 0, RS_MainFont, False, False, 0, 0, cl_Yellow);
end;


(*
 ..
*) 
function RS_AtLoginDetails: Boolean;
begin
  Result := IsTextAtEx(272, 255, 'Login:', 0, RS_OptionFont, False, False, 0, 0, cl_White) or 
            IsTextAtEx(274, 270, 'Password:', 0, RS_OptionFont, False, False, 0, 0, cl_White);
end;


(*
 ..
*) 
function RS_AtLoginScreen: Boolean;
begin
  Result := True;
  if RS_AtLoginNewUserPage then Exit;
  if RS_AtLogin then Exit;
  if RS_AtLoginDetails then Exit;
  Result := False;
end;


(*
 Janilabos work!
*) 
function RS_GetLoginMessageID: Integer;
var
  h, i: Integer;
begin
  Result := -1;
  if not RS_AtLoginDetails then
    Exit;
  h := High(RS_LoginMessageArray);
  for i := 0 to h do
  begin
    if XT_IsTextAtEx(RS_LoginMessageArray[i].checkMsg, RS_LoginMessageArray[i].checkBox, RS_MainFontXT, 1,1, clYellow, 1,10,1,'') then
    begin
      Result := (10000 + i);
      Break;
    end;
  end;
end;


procedure RS_SolveLoginScreen;
var 
  x,y,t:Integer;
begin
  if RS_AtLoginNewUserPage then
  begin
    MMouseOvalEx(Point(380,322), 3,8, 6,20);
    GetMousePos(x,y);
    MouseClick2(Point(x,y), mbLeft);
    t := GetTimeRunning + 3000;
    while GetTimeRunning < t do
      if not(RS_AtLoginNewUserPage) then
        Break;
  end; 

  if RS_AtLogin then
  begin
    MMouseOvalEx(Point(460,295), 3,8, 6,20);
    GetMousePos(x,y);
    MouseClick2(Point(x,y), mbLeft);
    t := GetTimeRunning + 3000;
    while GetTimeRunning < t do
      if not(RS_AtLogin) then
        Break;
  end;  
end;


//Supersimple hacky loginfunction..
function RS_LoginPlayer(username,password:String): Boolean;
var
  T,x,y,msg:Integer;
  DoContinue,Mark: Boolean;
begin
  Result := True;
  if not(RS_LoggedIn) then
  begin
    RS_SolveLoginScreen;  
    msg := RS_GetLoginMessageID;
    Result := (msg <> -1) and (msg <> LOGIN_INVALID) and (msg <> LOGIN_DISABLED);
    if not(Result) then Exit;
    
    WaitG(130,25);
    TypeText(Username);
    WaitG(130,25);
    PressVKey(VK_TAB);
    WaitG(130,25);
    TypeText(Password);
    WaitG(130,25);
    MMouseOvalEx(Point(302,322), 3,8, 6,20);
    GetMousePos(x,y);
    MouseClick2(Point(x,y), mbLeft);
    Wait(2000);    
    
    msg := RS_GetLoginMessageID;  
    if (msg = LOGIN_INVALID) or 
       (msg = LOGIN_DISABLED) or
       (msg = LOGIN_CONNETCION_ERROR) or
       (msg = LOGIN_IS_ONLINE) then
    begin
      Result := False;
      Exit;   
    end;
    
    T := GetTimeRunning + 10000; 
    Mark := False;
    while GetTimeRunning < T do
    begin 
      if (RS_GetLoginMessageID = LOGIN_TRANSFERRING) and not(Mark) then
      begin
        Mark := True;
        T := GetTimeRunning + 40000;
      end;
      DoContinue := RS_AtWelcomeScreen;
      if DoContinue then Break;
    end;
    if Not(DoContinue) then Exit;
    
    MMouseOvalEx(Point(400,330), 6,12, 24,36);
    GetMousePos(x,y);
    MouseClick2(Point(x,y), mbLeft);

    T := GetTimeRunning + 10000;
    while GetTimeRunning < T do
    begin
      DoContinue := RS_LoggedIn;
      if DoContinue then Break;
    end;
    Result := DoContinue;
  end;
end;
